# -*- coding: utf-8 -*-
"""vinho.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13qOWmf2fT09tNi3_thzviIjCuJqwzzer
"""

# importando bibliotecas e pacotes utilizados

import pandas as pd
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
import seaborn as sb

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import LabelEncoder, MinMaxScaler
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# importando arquivo wine

arquivo = pd.read_csv("wine.csv", sep=",")
arquivo.head(3)

# dropando colunas que não agregaram

arquivo = arquivo.drop(["Unnamed: 0", 'taster_name', 'description',"title"], axis='columns')

arquivo.head(3)

# tratando os valores Nan da coluna "price" pela média

arquivo["price"] = arquivo["price"].fillna(arquivo["price"].mean())

# fazendo o replace de valores Nan para as colunas

for coluna in arquivo:
  arquivo[coluna] = arquivo[coluna].replace(np.nan, "VAZIO")

# deixando as colunas string com uppercase

colunas_object = ["country", "province", "region_1", "region_2", "variety", "winery", "taster_twitter_handle", "designation"]

for strings in colunas_object:
  arquivo[strings] = arquivo[strings].str.upper()

melhores_paises = arquivo.loc[arquivo['points'] >= 99]
melhores_paises["country"].value_counts()

"""Verificamos que 3 dos 5 melhores países estão na região européia, que são França, Itália e Portugal, com mais de 50% dos melhores dos vinhos."""

# alterando os dados das colunas de string para int

labelencoder = LabelEncoder()

for transforma in colunas_object:
  arquivo[transforma] = labelencoder.fit_transform(arquivo[transforma])

# removendo os valores Nan restantes se tiver

arquivo = arquivo.dropna()

# realizando a correlacao das colunas

arquivo.corr()

# verificando que as melhores colunas sao as que tem menor correlação entre elas

# fazendo o pairplot para analisar a relação entre as colunas

sb.pairplot(arquivo[["price", "points", "country"]])

"""Verificamos que há alguns paises em que a pontuação acaba sendo menor, por isso iremos fazer uma analise dos 10 melhores paises e verificar de qual região pertencem

Também é possível que os mesmos países que tem alta pontuação, são os que tem vinhos mais caros, e pela visualização, a tendência de um vinho ser de qualidade é ele ser mais caro.
"""

# confirmando a ideia de que quanto mais caro um vinho, melhor a qualidade do mesmo

plt.scatter(y=arquivo["price"], x=arquivo["points"])
plt.ylim(0, 800)
plt.title("Aumento de preço conforme a qualidade do vinho")
plt.xlabel("Pontuação da qualidade do vinho")
plt.ylabel("Preço dado para o vinho")
plt.show()

"""Conclusão: A região que maior se concentra alta qualidade de vinhos é na região Européia, principalmente nos países (França, Itália e Portugal).

Quanto maior a qualidade do vinho, maior será o valor do vinho também.

Nova pergunta:


Prever a pontuação com base nos dados
"""

# separando o X e o y e então separando em dados de treino e teste

X = arquivo[["price", "country", "variety", "winery", "province"]]
y = arquivo["points"]

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)

# realizando a previsão com Linear Regression

modelo = LinearRegression()
modelo.fit(X_train, y_train)
predicao = modelo.predict(X_test)

# realizando testes para saber se o modelo deu certo

mae = mean_absolute_error(y_test, predicao)
print(f"Mean absolute error = {mae}")

mse = mean_squared_error(y_test, predicao)
print(f"Mean squared error {mse}")

r2 = r2_score(y_test, predicao)
print(f"R2 = {r2}")