# -*- coding: utf-8 -*-
"""titanic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UQLFyZMXAq1O0JpJZyLf11soC3BloL28
"""

#Importando bibliotecas utilizadas

import pandas as pd
import re

from sklearn.dummy import DummyClassifier
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import metrics
from sklearn.metrics import recall_score
from sklearn.metrics import accuracy_score

#Chamando o arquivo de treino

titanic = pd.read_csv("train.csv", encoding="ISO-8859-1", sep=",")
titanic.head()

#Trocando os valores da variável "Sex" de string para int 

sexo_map = {"male": 1, "female": 0}
titanic["Sex"] = titanic["Sex"].map(sexo_map)
titanic["Sex"].head()

#Usando regex para pegar o tratamento do nome na coluna "Name"

titanic["Tratamento"] = titanic["Name"].str.extract(r",(.*)\.")
titanic["Tratamento"] = titanic["Tratamento"].str.replace(" ","")

#Substituindo agora o Mrs=0 Mr=1 Miss=2

name_map = {"Mrs": 0, "Mr": 1, "Miss": 2}
titanic["Tratamento"] = titanic["Tratamento"].map(name_map)
titanic["Tratamento"].head()

#Retirando todos os valores Nan existentes

titanic = titanic.dropna()

#Definindo valores de X e y

data = titanic[["Pclass", "Sex", "Age", "Tratamento"]]
target = titanic["Survived"]
X = data
y = target

#Separando os dados de teste e treino

X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=1)
X_test.head()

#Criando o modelo do titanic

titanic_model = DecisionTreeClassifier(random_state=1)

#Dando fitting nos dados de treino

titanic_model = titanic_model.fit(X_train, y_train)

#Predictando os resultados

resultado_predicao = titanic_model.predict(X_test)

#Calculando a acurácia do modelo e o recall também

acuracia = accuracy_score(y_test, resultado_predicao)
recall = recall_score(y_test, resultado_predicao, average='macro')

#Realizando o teste de Dummy para comparar a acurácia

dummy = DummyClassifier()

dummy.fit(X_train, y_train)
resultado1 = dummy.predict(X_test)

acuracia1 = accuracy_score(y_test, resultado1)
print(acuracia1)

#Inserindo os dados preditiveis na tabela para melhor visualização

dados_finais = {"Idade": X_test["Age"], "Sexo": X_test["Sex"], 
                "Classe": X_test["Pclass"], "Chances sobreviver": resultado_predicao}
df = pd.DataFrame(data=dados_finais)
df.head()

# Commented out IPython magic to ensure Python compatibility.
#Comparando o resultado de acurácia com do recall e os dummy

print(f"""Observamos que o resultado do modelo de teste, temos uma acuracia de
#           %{acuracia} com um recall de %{recall}, porém ao compararmos com a % 
          dos dummy temos %{acuracia1}""")

"""Concluímos que o modelo atende as expectativas e pode ser usado para modelagem, já que a % da acurácia e recall é maior que a acurácia feita pelos dummy's."""